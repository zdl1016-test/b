worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_package_path "/home/make/test5/b/openrestry-test/test1/conf/api_limit/?.lua;/usr/local/openresty/lualib/?.lua";  #路径

    #lua_shared_dict statics_dict    1M; # 初始化变量
    #lua_package_path "/etc/nginx/ngx_lua_reqstatus/?.lua";  #路径
    #log_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/hook.lua"; #  添加此句

    #lua_shared_dict req_dict    1M; # 初始化变量
    #access_by_lua_file /home/make/test5/b/openrestry-test/test1/conf/api_limit/req_enter.lua;
    #log_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/api_limit/req_leave.lua"; #  添加此句
    #init_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/api_limit/init.lua"; #  添加此句
    #init_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/api_limit/init2.lua"; #  添加此句

    # force reading request body (default off)
    lua_need_request_body on;

    # only for dev env
    lua_code_cache off;

    # 监控服务
    server {
        listen 6080;
        #location / {
        #    #content_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/status.lua";
        #}
        #location /req_monitor {
        #    default_type text/html;
        #    content_by_lua_file "/home/make/test5/b/openrestry-test/test1/conf/api_limit/req_monitor.lua";
        #}
    }

    resolver 8.8.8.8;

    server {
        listen 9080;
        server_name aaa.com;
        root  /home/www;
        index  index.php;

        location /http_test {
            default_type text/html;
            content_by_lua_file /home/make/test5/b/openrestry-test/test1/conf/http_test/http_test.lua;
        }


        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }

        location ~ .*\.(php|php5)?$
        {
#fastcgi_pass   unix:/dev/shm/php.socket;
            fastcgi_pass  127.0.0.1:9000;
            fastcgi_index index.php;
            include fcgi.conf;
        }
            location /inline_concat {
                # MIME type determined by default_type:
                default_type 'text/plain';

                set $a "hello";
                set $b "world";
                # inline Lua script
                set_by_lua $res "return ngx.arg[1]..ngx.arg[2]" $a $b;
                echo $res;
            }

            location /rel_file_concat {
                set $a "foo";
                set $b "bar";
                # script path relative to nginx prefix
                # $ngx_prefix/conf/concat.lua contents:
                #
                #    return ngx.arg[1]..ngx.arg[2]
                #
                set_by_lua_file $res conf/concat.lua $a $b;
                echo $res;
            }

             location /nginx_var {
                # MIME type determined by default_type:
                default_type 'text/plain';

                # try access /nginx_var?a=hello,world
                content_by_lua "ngx.print(ngx.var['arg_a'], '\\n')";
            }

            location /request_body {
                 # force reading request body (default off)
                 lua_need_request_body on;
                 client_max_body_size 50k;
                 client_body_buffer_size 50k;


                 content_by_lua 'ngx.print(ngx.var.request_body)';
            }

            # GET /recur?num=5
            location /recur {
                # MIME type determined by default_type:
                default_type 'text/plain';

                content_by_lua '
                   local num = tonumber(ngx.var.arg_num) or 0

                   if num > 50 then
                       ngx.say("num too big")
                       return
                   end

                   ngx.say("num is: ", num)

                   if num > 0 then
                       res = ngx.location.capture("/recur?num=" .. tostring(num - 1))
                       ngx.print("status=", res.status, " ")
                       ngx.print("body=", res.body)
                   else
                       ngx.say("end")
                   end
                   ';
            }

            location /balance {
                # MIME type determined by default_type:
                default_type 'text/plain';

               access_by_lua '
                    aaaa=true
                   -- check the client IP address is in our black list
                   if ngx.var.remote_addr == "132.5.72.3" then
                       ngx.exit(ngx.HTTP_FORBIDDEN)
                   end
                   -- check if the request body contains bad words
                   if ngx.var.request_body and
                            string.match(ngx.var.request_body, "fsck")
                   then
                       ngx.exit(ngx.HTTP_FORBIDDEN)
                   end

                   --ngx.say(ngx.var.request_body)

                   -- tests passed
                    aaaa=true
               ';

                content_by_lua '
                    if aaaa then
                        ngx.say("hit")
                    end
                   ngx.say("hello world")
                   ';
            }



    }
}
